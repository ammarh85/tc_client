/**
 * Travel Conseriage
 * API for managing Travel Conceriage Service datasets.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ammar.haris@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Agent'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Agent'));
  } else {
    // Browser globals (root is window)
    if (!root.TravelConseriage) {
      root.TravelConseriage = {};
    }
    root.TravelConseriage.AgentApi = factory(root.TravelConseriage.ApiClient, root.TravelConseriage.Agent);
  }
}(this, function(ApiClient, Agent) {
  'use strict';

  /**
   * Agent service.
   * @module api/AgentApi
   * @version 1.0.0
   */

  /**
   * Constructs a new AgentApi. 
   * @alias module:api/AgentApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createAgent operation.
     * @callback module:api/AgentApi~createAgentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Agent
     * This can only be done by the logged in user.
     * @param {module:model/Agent} body Created user object
     * @param {module:api/AgentApi~createAgentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createAgent = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling createAgent");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/xml', 'application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/agent', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createAgentsWithArrayInput operation.
     * @callback module:api/AgentApi~createAgentsWithArrayInputCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates list of agents with given input array
     * 
     * @param {Array.<module:model/Agent>} body List of agent object
     * @param {module:api/AgentApi~createAgentsWithArrayInputCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createAgentsWithArrayInput = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling createAgentsWithArrayInput");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/xml', 'application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/agent/createWithArray', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAgents operation.
     * @callback module:api/AgentApi~getAgentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Agent>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all agents in the system
     * Returns list of all Agents
     * @param {module:api/AgentApi~getAgentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Agent>}
     */
    this.getAgents = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Agent];

      return this.apiClient.callApi(
        '/agent/getAgents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getagentById operation.
     * @callback module:api/AgentApi~getagentByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Agent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns An Agent for a given id
     * Returns agent object
     * @param {String} agentId The id of the agent
     * @param {module:api/AgentApi~getagentByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Agent}
     */
    this.getagentById = function(agentId, callback) {
      var postBody = null;

      // verify the required parameter 'agentId' is set
      if (agentId == undefined || agentId == null) {
        throw new Error("Missing the required parameter 'agentId' when calling getagentById");
      }


      var pathParams = {
      };
      var queryParams = {
        'agentId': agentId
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Agent;

      return this.apiClient.callApi(
        '/agent/getAgentById', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the loginUser operation.
     * @callback module:api/AgentApi~loginUserCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Logs user into the system
     * 
     * @param {String} username The user name for login
     * @param {String} password The password for login in clear text
     * @param {module:api/AgentApi~loginUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.loginUser = function(username, password, callback) {
      var postBody = null;

      // verify the required parameter 'username' is set
      if (username == undefined || username == null) {
        throw new Error("Missing the required parameter 'username' when calling loginUser");
      }

      // verify the required parameter 'password' is set
      if (password == undefined || password == null) {
        throw new Error("Missing the required parameter 'password' when calling loginUser");
      }


      var pathParams = {
      };
      var queryParams = {
        'username': username,
        'password': password
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/xml', 'application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/agent/login', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
